// Generated by Dagger (https://dagger.dev).
package com.debugdrawer.sampleapp.network;

import com.debugdrawer.utils.NetworkInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SampleNetworkClient_Factory implements Factory<SampleNetworkClient> {
  private final Provider<NetworkInterceptor> networkInterceptorProvider;

  public SampleNetworkClient_Factory(Provider<NetworkInterceptor> networkInterceptorProvider) {
    this.networkInterceptorProvider = networkInterceptorProvider;
  }

  @Override
  public SampleNetworkClient get() {
    return newInstance(networkInterceptorProvider.get());
  }

  public static SampleNetworkClient_Factory create(
      Provider<NetworkInterceptor> networkInterceptorProvider) {
    return new SampleNetworkClient_Factory(networkInterceptorProvider);
  }

  public static SampleNetworkClient newInstance(NetworkInterceptor networkInterceptor) {
    return new SampleNetworkClient(networkInterceptor);
  }
}
