// Generated by Dagger (https://dagger.dev).
package com.debugdrawer.sampleapp;

import com.debugdrawer.DebugDrawer;
import com.debugdrawer.modules.AppInfoModule;
import com.debugdrawer.modules.ClipboardModule;
import com.debugdrawer.modules.FeatureFlagsModule;
import com.debugdrawer.modules.LogsModule;
import com.debugdrawer.modules.NetworkModule;
import com.debugdrawer.modules.SettingsModule;
import com.debugdrawer.sampleapp.network.SampleNetworkClient;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<DebugDrawer> debugDrawerProvider;

  private final Provider<AppInfoModule> appInfoModuleProvider;

  private final Provider<NetworkModule> networkModuleProvider;

  private final Provider<FeatureFlagsModule> featureFlagsModuleProvider;

  private final Provider<LogsModule> logsModuleProvider;

  private final Provider<SettingsModule> settingsModuleProvider;

  private final Provider<ClipboardModule> clipboardModuleProvider;

  private final Provider<SampleNetworkClient> sampleNetworkClientProvider;

  public MainActivity_MembersInjector(Provider<DebugDrawer> debugDrawerProvider,
      Provider<AppInfoModule> appInfoModuleProvider, Provider<NetworkModule> networkModuleProvider,
      Provider<FeatureFlagsModule> featureFlagsModuleProvider,
      Provider<LogsModule> logsModuleProvider, Provider<SettingsModule> settingsModuleProvider,
      Provider<ClipboardModule> clipboardModuleProvider,
      Provider<SampleNetworkClient> sampleNetworkClientProvider) {
    this.debugDrawerProvider = debugDrawerProvider;
    this.appInfoModuleProvider = appInfoModuleProvider;
    this.networkModuleProvider = networkModuleProvider;
    this.featureFlagsModuleProvider = featureFlagsModuleProvider;
    this.logsModuleProvider = logsModuleProvider;
    this.settingsModuleProvider = settingsModuleProvider;
    this.clipboardModuleProvider = clipboardModuleProvider;
    this.sampleNetworkClientProvider = sampleNetworkClientProvider;
  }

  public static MembersInjector<MainActivity> create(Provider<DebugDrawer> debugDrawerProvider,
      Provider<AppInfoModule> appInfoModuleProvider, Provider<NetworkModule> networkModuleProvider,
      Provider<FeatureFlagsModule> featureFlagsModuleProvider,
      Provider<LogsModule> logsModuleProvider, Provider<SettingsModule> settingsModuleProvider,
      Provider<ClipboardModule> clipboardModuleProvider,
      Provider<SampleNetworkClient> sampleNetworkClientProvider) {
    return new MainActivity_MembersInjector(debugDrawerProvider, appInfoModuleProvider, networkModuleProvider, featureFlagsModuleProvider, logsModuleProvider, settingsModuleProvider, clipboardModuleProvider, sampleNetworkClientProvider);
  }

  @Override
  public void injectMembers(MainActivity instance) {
    injectDebugDrawer(instance, debugDrawerProvider.get());
    injectAppInfoModule(instance, appInfoModuleProvider.get());
    injectNetworkModule(instance, networkModuleProvider.get());
    injectFeatureFlagsModule(instance, featureFlagsModuleProvider.get());
    injectLogsModule(instance, logsModuleProvider.get());
    injectSettingsModule(instance, settingsModuleProvider.get());
    injectClipboardModule(instance, clipboardModuleProvider.get());
    injectSampleNetworkClient(instance, sampleNetworkClientProvider.get());
  }

  @InjectedFieldSignature("com.debugdrawer.sampleapp.MainActivity.debugDrawer")
  public static void injectDebugDrawer(MainActivity instance, DebugDrawer debugDrawer) {
    instance.debugDrawer = debugDrawer;
  }

  @InjectedFieldSignature("com.debugdrawer.sampleapp.MainActivity.appInfoModule")
  public static void injectAppInfoModule(MainActivity instance, AppInfoModule appInfoModule) {
    instance.appInfoModule = appInfoModule;
  }

  @InjectedFieldSignature("com.debugdrawer.sampleapp.MainActivity.networkModule")
  public static void injectNetworkModule(MainActivity instance, NetworkModule networkModule) {
    instance.networkModule = networkModule;
  }

  @InjectedFieldSignature("com.debugdrawer.sampleapp.MainActivity.featureFlagsModule")
  public static void injectFeatureFlagsModule(MainActivity instance,
      FeatureFlagsModule featureFlagsModule) {
    instance.featureFlagsModule = featureFlagsModule;
  }

  @InjectedFieldSignature("com.debugdrawer.sampleapp.MainActivity.logsModule")
  public static void injectLogsModule(MainActivity instance, LogsModule logsModule) {
    instance.logsModule = logsModule;
  }

  @InjectedFieldSignature("com.debugdrawer.sampleapp.MainActivity.settingsModule")
  public static void injectSettingsModule(MainActivity instance, SettingsModule settingsModule) {
    instance.settingsModule = settingsModule;
  }

  @InjectedFieldSignature("com.debugdrawer.sampleapp.MainActivity.clipboardModule")
  public static void injectClipboardModule(MainActivity instance, ClipboardModule clipboardModule) {
    instance.clipboardModule = clipboardModule;
  }

  @InjectedFieldSignature("com.debugdrawer.sampleapp.MainActivity.sampleNetworkClient")
  public static void injectSampleNetworkClient(MainActivity instance,
      SampleNetworkClient sampleNetworkClient) {
    instance.sampleNetworkClient = sampleNetworkClient;
  }
}
