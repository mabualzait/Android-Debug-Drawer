// Generated by Dagger (https://dagger.dev).
package com.debugdrawer.di;

import android.content.Context;
import com.debugdrawer.modules.ClipboardModule;
import com.debugdrawer.utils.Logger;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DebugDrawerModule_ProvideClipboardModuleFactory implements Factory<ClipboardModule> {
  private final Provider<Context> contextProvider;

  private final Provider<Logger> loggerProvider;

  public DebugDrawerModule_ProvideClipboardModuleFactory(Provider<Context> contextProvider,
      Provider<Logger> loggerProvider) {
    this.contextProvider = contextProvider;
    this.loggerProvider = loggerProvider;
  }

  @Override
  public ClipboardModule get() {
    return provideClipboardModule(contextProvider.get(), loggerProvider.get());
  }

  public static DebugDrawerModule_ProvideClipboardModuleFactory create(
      Provider<Context> contextProvider, Provider<Logger> loggerProvider) {
    return new DebugDrawerModule_ProvideClipboardModuleFactory(contextProvider, loggerProvider);
  }

  public static ClipboardModule provideClipboardModule(Context context, Logger logger) {
    return Preconditions.checkNotNullFromProvides(DebugDrawerModule.INSTANCE.provideClipboardModule(context, logger));
  }
}
