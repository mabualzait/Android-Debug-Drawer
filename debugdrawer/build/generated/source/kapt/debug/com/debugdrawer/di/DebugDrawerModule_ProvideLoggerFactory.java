// Generated by Dagger (https://dagger.dev).
package com.debugdrawer.di;

import com.debugdrawer.utils.Logger;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DebugDrawerModule_ProvideLoggerFactory implements Factory<Logger> {
  @Override
  public Logger get() {
    return provideLogger();
  }

  public static DebugDrawerModule_ProvideLoggerFactory create() {
    return InstanceHolder.INSTANCE;
  }

  public static Logger provideLogger() {
    return Preconditions.checkNotNullFromProvides(DebugDrawerModule.INSTANCE.provideLogger());
  }

  private static final class InstanceHolder {
    private static final DebugDrawerModule_ProvideLoggerFactory INSTANCE = new DebugDrawerModule_ProvideLoggerFactory();
  }
}
