// Generated by Dagger (https://dagger.dev).
package com.debugdrawer.di;

import android.content.Context;
import com.debugdrawer.modules.NetworkModule;
import com.debugdrawer.utils.Logger;
import com.debugdrawer.utils.NetworkInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DebugDrawerModule_ProvideNetworkModuleFactory implements Factory<NetworkModule> {
  private final Provider<Context> contextProvider;

  private final Provider<Logger> loggerProvider;

  private final Provider<NetworkInterceptor> networkInterceptorProvider;

  public DebugDrawerModule_ProvideNetworkModuleFactory(Provider<Context> contextProvider,
      Provider<Logger> loggerProvider, Provider<NetworkInterceptor> networkInterceptorProvider) {
    this.contextProvider = contextProvider;
    this.loggerProvider = loggerProvider;
    this.networkInterceptorProvider = networkInterceptorProvider;
  }

  @Override
  public NetworkModule get() {
    return provideNetworkModule(contextProvider.get(), loggerProvider.get(), networkInterceptorProvider.get());
  }

  public static DebugDrawerModule_ProvideNetworkModuleFactory create(
      Provider<Context> contextProvider, Provider<Logger> loggerProvider,
      Provider<NetworkInterceptor> networkInterceptorProvider) {
    return new DebugDrawerModule_ProvideNetworkModuleFactory(contextProvider, loggerProvider, networkInterceptorProvider);
  }

  public static NetworkModule provideNetworkModule(Context context, Logger logger,
      NetworkInterceptor networkInterceptor) {
    return Preconditions.checkNotNullFromProvides(DebugDrawerModule.INSTANCE.provideNetworkModule(context, logger, networkInterceptor));
  }
}
