// Generated by Dagger (https://dagger.dev).
package com.debugdrawer;

import com.debugdrawer.utils.Logger;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DebugDrawer_Factory implements Factory<DebugDrawer> {
  private final Provider<Logger> loggerProvider;

  public DebugDrawer_Factory(Provider<Logger> loggerProvider) {
    this.loggerProvider = loggerProvider;
  }

  @Override
  public DebugDrawer get() {
    return newInstance(loggerProvider.get());
  }

  public static DebugDrawer_Factory create(Provider<Logger> loggerProvider) {
    return new DebugDrawer_Factory(loggerProvider);
  }

  public static DebugDrawer newInstance(Logger logger) {
    return new DebugDrawer(logger);
  }
}
