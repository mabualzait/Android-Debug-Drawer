// Generated by Dagger (https://dagger.dev).
package com.debugdrawer.di;

import com.debugdrawer.utils.Logger;
import com.debugdrawer.utils.NetworkInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DebugDrawerModule_ProvideNetworkInterceptorFactory implements Factory<NetworkInterceptor> {
  private final Provider<Logger> loggerProvider;

  public DebugDrawerModule_ProvideNetworkInterceptorFactory(Provider<Logger> loggerProvider) {
    this.loggerProvider = loggerProvider;
  }

  @Override
  public NetworkInterceptor get() {
    return provideNetworkInterceptor(loggerProvider.get());
  }

  public static DebugDrawerModule_ProvideNetworkInterceptorFactory create(
      Provider<Logger> loggerProvider) {
    return new DebugDrawerModule_ProvideNetworkInterceptorFactory(loggerProvider);
  }

  public static NetworkInterceptor provideNetworkInterceptor(Logger logger) {
    return Preconditions.checkNotNullFromProvides(DebugDrawerModule.INSTANCE.provideNetworkInterceptor(logger));
  }
}
